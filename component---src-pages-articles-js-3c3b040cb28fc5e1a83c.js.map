{"version":3,"sources":["webpack:///./src/components/Container/index.ts","webpack:///./src/components/Header/header.tsx","webpack:///./src/components/Articles/article.tsx","webpack:///./src/pages/articles.js","webpack:///./src/utils/global-css.js"],"names":["Container","Header","Wrapper","WrapperOverlay","AnchorContainer","href","rel","target","to","Grid","GridItem","GridContent","ArticleFeed","edges","map","node","title","frontmatter","fields","slug","style","marginBottom","date","dangerouslySetInnerHTML","__html","description","excerpt","pageQuery","NotesPage","data","Layout","styles","globalStyles","allMarkdownRemark"],"mappings":"6IAIaA,EAAY,mBAAH,oBAAG,CAAH,8I,oICiBPC,EAhBA,WACb,OACE,YAACC,EAAD,KACE,YAACC,EAAD,KACE,YAACH,EAAA,EAAD,KACA,YAACI,EAAD,KACA,iBAAGC,KAAK,GAAGC,IAAI,sBAAsBC,OAAO,UAA5C,UACA,YAAC,OAAD,CAAMC,GAAG,KAAT,QACA,YAAC,OAAD,CAAMA,GAAG,aAAT,iBAUFN,EAAU,mBAAH,oBAAG,CAAH,6DAKPE,EAAkB,mBAAH,oBAAG,CAAH,6PAyBfD,EAAiB,mBAAH,oBAAG,CAAH,2G,qLC7CdM,EAAO,mBAAH,mBAAG,CAAH,2PAgBJC,EAAW,mBAAH,mBAAG,CAAH,yGAORC,EAAc,mBAAH,mBAAG,CAAH,2CAiDFC,EA5CK,SAAC,GAAY,IAAXC,EAAW,EAAXA,MAEpB,OACE,YAACb,EAAA,EAAD,KACA,YAACS,EAAD,KACEI,EAAMC,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACLC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KACpD,OACE,YAAC,OAAD,CAAMX,GAAIO,EAAKG,OAAOC,MACtB,YAACT,EAAD,KACA,YAACC,EAAD,KACE,kBAAIS,MAAO,CAAEC,aAAc,KAAQL,GACnC,yBAASD,EAAKE,YAAYK,MAC1B,2BACE,iBACEC,wBAAyB,CACvBC,OAAQT,EAAKE,YAAYQ,aAAeV,EAAKW,mBAW3D,YAACjB,EAAD,KACE,iBAAGJ,KAAK,8EAA8EE,OAAO,SAASD,IAAI,uBAC1G,YAACI,EAAD,KACE,YAACC,EAAD,KACE,sEACA,4CACA,2BACE,8G,YC1CCgB,GAFEC,UAfG,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAElB,OACE,YAACC,EAAA,EAAD,KACE,YAAC,IAAD,CAAQC,OAASC,MACjB,YAAC/B,EAAA,EAAD,MACA,YAAC,IAAD,CAAKe,MAAM,UACX,YAAChB,EAAA,EAAD,KACE,mCAEF,YAAC,EAAD,CAAaa,MAAOgB,EAAKI,kBAAkBpB,UAO3B,e,oCC5BtB,gDAEamB,EAAY","file":"component---src-pages-articles-js-3c3b040cb28fc5e1a83c.js","sourcesContent":["import styled from '@emotion/styled'\n\n//max-width: 1280px;\n\nexport const Container = styled.div`\n  max-width: 1280px;\n  margin: 0 auto;\n  width: 90%;\n\n  @media (min-width: 600px) {\n    width: 90%;\n  }\n\n  @media (min-width: 993px) {\n    width: 80%;\n  }\n`\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { Container } from '../Container'\n\nconst Header = () => {\n  return (\n    <Wrapper>\n      <WrapperOverlay>\n        <Container>\n        <AnchorContainer>\n        <a href=\"\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a>\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/articles\">Articles</Link>\n        </AnchorContainer>\n        </Container>\n      </WrapperOverlay>\n    </Wrapper>\n  )\n}\n\nexport default Header\n\nconst Wrapper = styled.div`\n  background: transparent;\n  width: 100%;\n`\n\nconst AnchorContainer = styled.div`\n  align-items: center;\n  display: flex;\n  margin-left: auto;\n  margin-right: 1rem;\n  width: max-content;\n\n  @media (max-width: 960px) {\n    display: block;\n  }\n\n  a {\n    color: inherit;\n    margin-right: 2.5rem;\n\n    &:last-child {\n      margin-right: unset;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`\n\nconst WrapperOverlay = styled.div`\n  padding: 1.5rem 0;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`","import React, { useEffect } from 'react'\nimport { Link } from 'gatsby'\nimport { Container } from '../Container'\n//import { GridLayoutContext } from '../components/GridLayout'\nimport PropTypes from 'prop-types'\nimport styled from '@emotion/styled'\n\n\nconst Grid = styled.div`\n  display: grid;\n  align-items: center;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: 8fr;\n  gap: 1.2rem 1.2rem;\n\n  @media (max-width: 960px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (max-width: 680px) {\n    grid-template-columns: 1fr;\n  }\n`\n\nconst GridItem = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  box-shadow: 0 1px 6px 0 rgba(0, 0, 0, .11);\n`\n\nconst GridContent = styled.div`\n  padding: 1rem 0;\n`\n\n\nconst ArticleFeed = ({edges}) => {\n\n  return (\n    <Container>\n    <Grid>\n    { edges.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <Link to={node.fields.slug}>\n          <GridItem>\n          <GridContent>\n            <h3 style={{ marginBottom: 10, }}>{title}</h3>\n            <small>{ node.frontmatter.date }</small>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </section>\n          </GridContent>\n          </GridItem>\n          </Link>\n        )\n      })\n    }\n    </Grid>\n    <Grid>\n      <a href=\"https://observablehq.com/@pehcy/monte-carlo-simulation-serving-time-in-bank\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <GridItem>\n        <GridContent>\n          <h3>Monte-Carlo Simulation: Serving Time in Bank</h3>\n          <small>August 30, 2020</small>\n          <section>\n            <p>Visualize the serving time of a poorly maintained bank in Observable Notebook.</p> \n          </section>\n        </GridContent>\n      </GridItem>\n      </a>\n    </Grid>\n    </Container>\n  )\n}\n\nexport default ArticleFeed","import React from \"react\"\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/Layout\"\nimport Header from \"../components/Header\"\nimport ArticleFeed from \"../components/Articles\"\nimport { Container } from \"../components/Container\"\nimport { graphql } from \"gatsby\"\n\nimport { Global } from '@emotion/core'\nimport { globalStyles } from '../utils/global-css' \n\nconst NotesPage = ({data}) => {\n\n  return (\n    <Layout>\n      <Global styles={ globalStyles } />\n      <Header/>\n      <SEO title=\"Notes\" />\n      <Container>\n        <h3>Articles</h3>\n      </Container>\n      <ArticleFeed edges={data.allMarkdownRemark.edges}/>\n    </Layout>\n  )\n}\n\nexport default NotesPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        author {\n          name\n          summary\n          contacts {\n            twitter\n            linkedin\n            discord\n            rss\n          }\n        }\n        social {\n          twitter\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC },\n      filter: { frontmatter: { template: { eq: \"post\" }}}\n      ){\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`","import { css } from '@emotion/core'\n\nexport const globalStyles = css`\n  @font-face {\n    font-family: \"Inter\", \"system-ui\", \"-apple-system\", \n      \"BlinkMacSystemFont\", \"Segoe UI\", \"Roboto\", \n      \"Helvetica Neue\", \"sans-serif\";\n    font-weight: 400;\n    font-style: normal;\n  }\n\n  a {\n    color: inherit;\n    text-decoration: none;\n    cursor: pointer;\n  }\n\n  body {\n    font-family: \"Inter\", \"system-ui\", \"-apple-system\", \n      \"BlinkMacSystemFont\", \"Segoe UI\", \"Roboto\", \n      \"Helvetica Neue\", \"sans-serif\";\n    font-weight: 400;\n  }\n`\n"],"sourceRoot":""}