{"version":3,"sources":["webpack:///./src/components/toc.js","webpack:///./src/components/use-active-hash.js","webpack:///./src/templates/blog-post.js"],"names":["TableOfContents","html","tocStyle","activeHash","itemIds","rootMargin","undefined","useState","setActiveHash","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","id","observe","document","getElementById","unobserve","useActiveHash","useMemo","val","dummyDOM","createElement","innerHTML","querySelectorAll","a","push","hash","replace","classList","remove","activeLink","length","add","className","dangerouslySetInnerHTML","__html","css","BlogPostTemplate","data","pageContext","location","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","map","bp","frontmatter","description","excerpt","style","marginTop","rhythm","marginBottom","scale","display","date","tableOfContents","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","pageQuery"],"mappings":"6oBA0EeA,MArEf,YAAoC,IAATC,EAAQ,EAARA,KAInBC,EAAQ,EA0CRC,ECjDqB,SAACC,EAASC,QAA2B,IAA3BA,WAAaC,GAAc,MAC5BC,mBAAS,IAAtCJ,EADyD,KAC7CK,EAD6C,KA0BhE,OAvBAC,qBAAU,WACR,IAAMC,EAAW,IAAIC,sBACnB,SAAAC,GACEA,EAAQC,SAAQ,SAAAC,GACVA,EAAMC,gBACRP,EAAcM,EAAME,OAAOC,SAIjC,CAAEZ,WAAYA,GAAU,kBAO1B,OAJAD,EAAQS,SAAQ,SAAAI,GACdP,EAASQ,QAAQC,SAASC,eAAeH,OAGpC,WACLb,EAAQS,SAAQ,SAAAI,GACdP,EAASW,UAAUF,SAASC,eAAeH,UAG9C,IAEId,EDuBYmB,CAfCC,mBAAQ,WAC1B,IAAIC,EAAM,GACV,GAAuB,oBAAbL,SAAyB,CACjC,IAAIM,EAAWN,SAASO,cAAc,QACtCD,EAASE,UAAY1B,EACDwB,EAASG,iBAAT,KAERf,SAAQ,SAAAgB,GAClBL,EAAIM,KAAKD,EAAEE,KAAKC,QAAQ,IAAK,QAIjC,OAAOR,IACN,KAoBH,OAhBAf,qBAAU,WACSU,SAASS,iBAAT,UAERf,SAAQ,SAAAgB,GACfA,EAAEI,UAAUC,OAAO,eAGrB,IAAMC,EAAahB,SAASS,iBAAT,mBACOzB,EADP,MAIfgC,EAAWC,QACbD,EAAW,GAAGF,UAAUI,IAAI,cAE7B,CAAClC,IAGF,mBAAKmC,UAAU,MAAMC,wBAAyB,CAAEC,OAAQvC,GAAQwC,IAAKvC,K,urBE0B1DwC,UAxFU,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAEvCC,EAAOH,EAAKI,eACZC,EAAYL,EAAKM,KAAKC,aAAaC,MACjCC,EAAmBR,EAAnBQ,SAAUC,EAAST,EAATS,KAIE,CAAC,IAAK,IAAK,IAAK,MACbC,KACrB,SAAAC,GAAE,4BAA0BA,EAA1B,SASJ,OACE,YAAC,IAAD,CAAQV,SAAUA,EAAUM,MAAOH,GACjC,YAAC,IAAD,CACEG,MAAOL,EAAKU,YAAYL,MACxBM,YAAaX,EAAKU,YAAYC,aAAeX,EAAKY,UAEpD,2BACE,0BACE,kBACEC,MAAO,CACLC,UAAWC,YAAO,GAClBC,aAAc,IAGfhB,EAAKU,YAAYL,OAEpB,iBACEQ,MAAK,OACAI,aAAM,KADN,IAEHC,QAAQ,QACRF,aAAcD,YAAO,MAGtBf,EAAKU,YAAYS,OAItB,YAAC,EAAD,CAAiBhE,KAAM6C,EAAKoB,kBAC5B,uBAAS3B,wBAAyB,CAAEC,OAAQM,EAAK7C,QACjD,kBACE0D,MAAO,CACLG,aAAcD,YAAO,MAGzB,0BACE,YAAC,IAAD,QAIJ,uBACE,kBACEF,MAAO,CACLK,QAAQ,OACRG,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,sBACGlB,GACC,YAAC,OAAD,CAAMmB,GAAInB,EAASoB,OAAOC,KAAMC,IAAI,QAApC,KACKtB,EAASI,YAAYL,QAI9B,sBACGE,GACC,YAAC,OAAD,CAAMkB,GAAIlB,EAAKmB,OAAOC,KAAMC,IAAI,QAC7BrB,EAAKG,YAAYL,MADpB,WA7Ed,IA0FawB,EAAS","file":"component---src-templates-blog-post-js-6ccf7550b98d9ef704aa.js","sourcesContent":["import React, { useEffect, useMemo } from \"react\"\nimport { useActiveHash } from \"../components/use-active-hash\"\nimport { css } from \"@emotion/core\"\n//import ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser'\n\nfunction TableOfContents({ html }) {\n  //var parseToHTML = require('react-html-parser');\n\n  // toc styled css \n  const tocStyle = css`\n    position: sticky;\n    top: 0;\n    font-size: 85%;\n    height: 0px;\n    > ul {\n      transform: translateX(calc(-100% - 4em)) translateY(6em);\n      padding-left: 0px;\n    };\n    ul {\n      width: calc(-4em - 340px + 50vw);\n      li{\n        display: inline-block;\n        list-style: outside none none;\n      \n        a {\n          color: #88A0A8;\n          box-shadow: none;\n        }\n\n        .isActive{\n          color: black;\n        }\n      }\n    };\n  `\n\n  const targetedIds = useMemo(() => {\n    let val = []\n    if(typeof document !== 'undefined'){\n      var dummyDOM = document.createElement(\"html\")\n      dummyDOM.innerHTML = html\n      const justAnchors = dummyDOM.querySelectorAll(`a`)\n    \n      justAnchors.forEach(a => {\n        val.push(a.hash.replace(\"#\", \"\"))\n      });\n    }\n\n    return val;\n  }, [])\n\n  const activeHash = useActiveHash(targetedIds)\n\n  useEffect(() => {\n    const ToClinks = document.querySelectorAll(`.Toc a`)\n\n    ToClinks.forEach(a => {\n      a.classList.remove(\"isActive\")\n    })\n\n    const activeLink = document.querySelectorAll(\n      `.Toc a[href$=\"${\"/#\" + activeHash}\"]`\n    )\n\n    if (activeLink.length) {\n      activeLink[0].classList.add(\"isActive\")\n    }\n  }, [activeHash])\n\n  return (\n    <div className=\"Toc\" dangerouslySetInnerHTML={{ __html: html }} css={tocStyle}/>\n  )\n}\n\nexport default TableOfContents","import { useEffect, useState } from \"react\"\n\nexport const useActiveHash = (itemIds, rootMargin = undefined) => {\n  const [activeHash, setActiveHash] = useState(``)\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            setActiveHash(entry.target.id)\n          }\n        })\n      },\n      { rootMargin: rootMargin || `0% 0% -80% 0%` }\n    )\n\n    itemIds.forEach(id => {\n      observer.observe(document.getElementById(id))\n    })\n\n    return () => {\n      itemIds.forEach(id => {\n        observer.unobserve(document.getElementById(id))\n      })\n    }\n  }, [])\n\n  return activeHash\n}","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\nimport TableOfContents from \"../components/toc\"\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const { previous, next } = pageContext\n\n\n  // media queries\n  const breakpoints = [576, 768, 992, 1200];\n  const mq = breakpoints.map(\n    bp => `@media (min-width: ${bp}px)`\n  )\n\n  const mq2 = n => {\n    const bpArray = bpArray.reduce((acc, [name, size]) => {\n      if (n === name) return [...acc, `@media ()`]\n    })\n  }\n\n  return (\n    <Layout location={location} title={siteTitle} >\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article>\n        <header>\n          <h1\n            style={{\n              marginTop: rhythm(1),\n              marginBottom: 0,\n            }}\n          >\n            {post.frontmatter.title}\n          </h1>\n          <p\n            style={{\n              ...scale(-1 / 5),\n              display: `block`,\n              marginBottom: rhythm(1),\n            }}\n          >\n            {post.frontmatter.date}\n          </p>\n        </header>\n        {/*<Toc className=\"Toc\" dangerouslySetInnerHTML={{ __html: post.tableOfContents }}/> */}\n        <TableOfContents html={post.tableOfContents}/>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      tableOfContents\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}